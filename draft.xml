<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY rfc2119 SYSTEM 'bibxml/reference.RFC.2119.xml'>      
<!ENTITY rfc4287 SYSTEM 'bibxml/reference.RFC.4287.xml'>      
<!ENTITY xmlns SYSTEM 'bibxml/reference.W3C.REC-xml-names-19990114.xml'>      
<!ENTITY rdfsg SYSTEM 'bibxml/reference.W3C.WD-rdf-syntax-grammar-20031010.xml'>      
]>
<rfc docName="draft-hanson-oauth-jit-auth-latest">
  <front>
    <title>OAuth 2.0 Just-in-Time Authorization</title>
    <author initials="J." surname="Hanson" fullname="Jared Hanson">
      <organization>Auth0 Inc.</organization>
      <address>       
        <email>jaredhanson@gmail.com</email> 
        <uri>http://www.jaredhanson.net/</uri>       
      </address>
    </author>
    <date/>
    <abstract>
      <t>
        Just-in-Time (JIT) authorization is a profile of OAuth 2.0.  JIT defines
        how clients can discover which authorization server governs access to a
        protected resource.  JIT also profiles existing OAuth 2.0 authorization
        grants to define how the client can obtain access to any number of
        protected resources with the minimum amount of user interaction.
      </t>
    </abstract>
  </front>
  <middle>
    
    <section title="Introduction">
      
      <section title="Notational Conventions">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
          "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
          "OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>
      </section>
      
      <section title="Roles">
        <t>
          JIT enhances the roles defined by OAuth in RFC 6749, section 1.1, in
          the following manner:
          
          <list style="hanging">
          <t hangText="resource owner:"><vspace blankLines="1"/>
            An entity capable of granting access to a protected resource. When
            the resource owner is a person, it is referred to as an end-user.
          </t>
            
          <t hangText="requesting party:"><vspace blankLines="1"/>
            An entity that uses a client to seek access to a protected resource.
            The requesting party may or may not be the same party as the
            resource owner.
          </t>
          
          <t hangText="resource server:"><vspace blankLines="1"/>
            The server hosting the protected resources, capable of accepting
            and responding to protected resource requests using access tokens.
          </t>
          
          <t hangText="client:"><vspace blankLines="1"/>
            An application making protected resource requests on behalf of the
            requesting party and with the resource owner's authorization.
          </t>
          
          <t hangText="authorization server:"><vspace blankLines="1"/>
            The server issuing access tokens to the client after successfully
            authenticating the requesting party and obtaining the resource
            owner's authorization.
          </t>
          </list> 
        </t>
      </section>
      
      <section title="WIP">
      <t>Continuous authorization...</t>
        
      <t>
        OAuth defines the refresh token in section 1.5 as:
        
        A refresh token is a string representing the authorization granted to
           the client by the resource owner.
      </t>
      
      <t>
        This profile extends the meaning of this to include a requesting party.
      </t>
      
      <t>
        The value of the scope parameter is expressed as a list of space-
           delimited, case-sensitive strings.  The strings are defined by the
           authorization server.
           
           Section 3.3.  This specificatin clarifies this to state that the
           scope is defined by the resource server
      </t>
      
      <t>
        the authorization server authenticates the resource owner and obtains
          an authorization decision (by asking the resource owner or by
          establishing approval via other means)  section 4.1.1
      </t>
      
      <t>
        The scope of the access request as described by
                 Section 3.3.  The requested scope MUST NOT include any scope
                 not originally granted by the resource owner, and if omitted is
                 treated as equal to the scope originally granted by the
                 resource owner.
        
                 Section 6.
                 
                 This specification clarifies "originally granted", chiefly to
                 remove the constraint.  This is in acknowledgement that the
                 resource owner's grant can change dynamically at any time, either
                 to decrease _or_ increase the scope of access.
      </t>
      
      <t>
        The refresh token is bound to the client and requesting party.
      </t>
      
      <t>
        Mechanism for resource server ot indicated trusted authorization servers:
        `iss` https://tools.ietf.org/html/draft-hardt-oauth-distributed-00
        
        auri and duri rel values: https://tools.ietf.org/html/draft-sakimura-oauth-meta-08
      </t>
      </section>
    </section>
    
    <section title="Protocol Flow">
      
      <section title="Client Requests Resource Without Providing an Access Token">
        <t>
          The client requests a protected resource without providing any access
          token.
        </t>
        
        <figure>
          <preamble>
            For example:
          </preamble>
          <artwork><![CDATA[
GET /resource HTTP/1.1
Host: server.example.net
]]></artwork>
        </figure>
        
      </section>
      
      <section title="Resource Server Responds to Client's Tokenless Access Attempt">
        <t>
          The resource server responds to the client's tokenless resource
          request.
        </t>
        
        <figure>
          <preamble>
            For example (line breaks are for display purposes only):
          </preamble>
          <artwork><![CDATA[
HTTP/1.1 401 Unauthorized
WWW-Authenticate: Bearer issuer="https://server.example.com",
                  scope="read.resource",
]]></artwork>
        </figure>
        
      </section>
      
      <section title="Client Seeks Access Token">
        <t>
          Client seeks access token by making authorization request to
          authorization server.  This can occur using any grant type
          supported by the AS
        </t>
        
        <t>
          Has two options, one to request an access token from the token
          endpoint immediately.  The other option is to initiate an
          authorization request to the authorization endpoint.
        </t>
        
        <section title="Client Seeks Access Token using Refresh Token">
          <t>
            Client is already authorized by the requesting party at the AS.
          </t>
        
          <figure>
            <preamble>
              For example:
            </preamble>
            <artwork><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
Content-Type: application/x-www-form-urlencoded

grant_type=refresh_token&refresh_token=tGzv3JOkF0XG5Qx2TlKWIA&resource=https://server.example.net/resource
]]></artwork>
          </figure>
        
        </section>
        
        <section title="Client Redirects to Authorization Endpoint">
          <t>
            Authorization server can interact with requesting party for purposes
            such as authentication, claims gathering, etc.
          </t>
          
          <figure>
            <preamble>
              For example:
            </preamble>
            <artwork><![CDATA[
GET /authorize?response_type=code&client_id=s6BhdRkqt3&state=xyz
    &resource=https://server.example.net/resource
    &redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb HTTP/1.1
Host: server.example.com
]]></artwork>
          </figure>
          
          
          <t>
            Authorization server redirects back.
          </t>
          
          <figure>
            <preamble>
              For example:
            </preamble>
            <artwork><![CDATA[
HTTP/1.1 302 Found
Location: https://client.example.com/cb?code=SplxlOBeZQQYbYS6WxSbIA
          &state=xyz
]]></artwork>
          </figure>
          
        </section>
        
      </section>
      
    </section>
    
  </middle>
  <back>
    <references title="Normative References">
      <?rfc include="reference.RFC.2119"?>
      <?rfc include="reference.RFC.4627"?>
      <?rfc include="reference.RFC.6749"?>
      <?rfc include='http://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.draft-ietf-oauth-discovery-05.xml'?>
    </references>
  </back>
</rfc>
