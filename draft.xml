<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY rfc2119 SYSTEM 'bibxml/reference.RFC.2119.xml'>      
<!ENTITY rfc4287 SYSTEM 'bibxml/reference.RFC.4287.xml'>      
<!ENTITY xmlns SYSTEM 'bibxml/reference.W3C.REC-xml-names-19990114.xml'>      
<!ENTITY rdfsg SYSTEM 'bibxml/reference.W3C.WD-rdf-syntax-grammar-20031010.xml'>      
]>
<rfc docName="draft-hanson-oauth-rad-latest">
  <front>
    <title>OAuth 2.0 Resource Authorization Directive</title>
    <author initials="J." surname="Hanson" fullname="Jared Hanson">
      <organization>Auth0 Inc.</organization>
      <address>       
        <email>jaredhanson@gmail.com</email> 
        <uri>http://www.jaredhanson.net/</uri>       
      </address>
    </author>
    <date/>
    <abstract>
      <t>
        Resource Authorization Directive (RAD) is a profile of OAuth 2.0.  RAD
        defines how clients can discover which authorization server governs
        access to a protected resource.  RAD also profiles existing OAuth 2.0
        authorization grants to define how the client can obtain access on
        behalf of a requesting party to any number of protected resources
        residing within multiple security domains with the minimum amount of
        user interaction.
      </t>
    </abstract>
  </front>
  <middle>
    
    <section title="Introduction">
      <t>
        This specification defines a profile of OAuth 2.0, enhancing its
        capabilities in the following ways.
        
        <list style='symbols'>
          <t>
            The resource owner authorizes protected resource access to clients
            used by entities that are in a requesting party role.  This enables
            multi-party authorization, rather than delegated application access
            alone.
          </t>
          <t>
            It enables resource servers operating in multiple security domains
            to federate authorization processing with an authorization server
            residing in yet another security domain.
          </t>
        </list>
      </t>
      
      <t>
        For example, the company Acme Corporation can use an access management
        service (authorization server) to control access to various software as
        a service (SaaS) providers, including a team collaboration application
        (resource server), cloud file system (another resource server), and a
        customer relationship management service (yet another resource server).
        Team manager Alice (resource owner) can manage the access that employees
        Bob and Carol (requesting parties) have to the various files, folders,
        and other information hosted by the SaaS providers.
      </t>
      
      <section title="Notational Conventions">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
          "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
          "OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>
      </section>
      
      <section title="Roles">
        <t>
          RAD enhances the roles defined by Section 1.1 of OAuth 2.0 <xref target="RFC6749"/>,
          in the following manner:
          
          <list style="hanging">
          <t hangText="resource owner:"><vspace blankLines="1"/>
            An entity capable of granting access to a protected resource. When
            the resource owner is a person, it is referred to as an end-user.
          </t>
            
          <t hangText="requesting party:"><vspace blankLines="1"/>
            An entity that uses a client to seek access to a protected resource.
            The requesting party may or may not be the same party as the
            resource owner.
          </t>
          
          <t hangText="resource server:"><vspace blankLines="1"/>
            The server hosting the protected resources, capable of accepting
            and responding to protected resource requests using access tokens.
          </t>
          
          <t hangText="client:"><vspace blankLines="1"/>
            An application making protected resource requests on behalf of the
            requesting party and with the resource owner's authorization.
          </t>
          
          <t hangText="authorization server:"><vspace blankLines="1"/>
            The server issuing access tokens to the client after successfully
            authenticating the requesting party and obtaining the resource
            owner's authorization.
          </t>
          </list> 
        </t>
      </section>
    </section>
    
    <section title="Obtaining Authorization and Accessing Protected Resources">
      
      <section title="Requesting a Resource Without Authentication Credentials">
        <t>
          The RAD profile begins when a client attempts to access a protected
          resource.  On the initial access attempt, the client's knowledge of
          the resource and its capabilities is limited, potentially only to the
          location of the resource itself.  In particular the client is not
          expected to know what scope of access is required, if any, or what
          authorization server governs access to the resource.
        </t>
        
        <section title="Client Requests a Resource Without Authentication Credentials">
          <t>
            The client requests a protected resource without providing
            authentication credentials.
          </t>
        
          <figure>
            <preamble>
              For example (line breaks are for display purposes only):
            </preamble>
            <artwork><![CDATA[
GET /resource HTTP/1.1
Host: server.example.net
]]></artwork>
          </figure>
        </section>
        
        <section title="Resource Server Responds to Client's Unauthenticated Request" anchor="auth-challenge">
          <t>
            The resource server responds to the client's unauthenticated request
            by including a WWW-Authenticate header field, as described in Section
            4.1 of <xref target="RFC7235"/>.
          </t>
          
          <t>
            This specification defines the "issuer" authentication parameter for
            use by authentication schemes that wish to indicate which
            authorization server issues access tokens that can be used as
            authentication credentials when requesting a protected resource.
          </t>
          
          <t>
            The value of the "issuer" authentication parameter is a URL that is
            the authorization server's issuer identifier.  This identifier MUST
            be usable in such a manner that the client can discover information
            needed to interact with the authorization server, including endpoint
            locations needed to obtain access tokens.
          </t>
          
          <t>
            When responding to the client's unauthenticated request, the
            resource server MUST include the "issuer" parameter and MAY include
            a "scope" parameter, as described in Section 3 of <xref target="RFC6750"/>.
          </t>
        
          <figure>
            <preamble>
              For example (line breaks are for display purposes only):
            </preamble>
            <artwork><![CDATA[
HTTP/1.1 401 Unauthorized
WWW-Authenticate: Bearer issuer="https://server.example.com",
                  scope="read.resource"
]]></artwork>
          </figure>
        </section>
        
        
        <section title="Client Proceeds to Respond to Authentication Challenge">
          <t>
            In order to proceed with accessing the protected resource, the
            client must respond to the authentication challenge by obtaining an
            access token.  
          </t>
          
          <t>
            There are two options for obtaining an access token.
            
            <list style='symbols'>
              <t>
                Interactive - used by the client to allow the authorization
                server to interact with the end-user.  This option is described
                in <xref target="interactive-authz"/>.
              </t>
              <t>
                Non-interactive - used by the client to obtain an access token
                directly without end-user interaction.  This option is described
                in <xref target="non-interactive-authz"/>.
              </t>
            </list>
          </t>
          
          <t>
            The process for obtaining an access token assumes that:
            
            <list style='symbols'>
              <t>
                The client has discovered the necessary metadata in order to
                interact with the authorization server.  This information may
                have been statically configured or retrieved dynamically using <xref target="I-D.ietf-oauth-discovery">OAuth 2.0 Authorization Server Metadata</xref>
                or <xref target="OpenID.Discovery">OpenID Connect Discovery 1.0</xref>.
              </t>
              
              <t>
                The client has obtained a client identifer and client
                credentials valid at the authorization server.  These
                credentials may have been statically configured or created
                dynamically using <xref target="RFC7591">OAuth 2.0 Dynamic Client Registration Protocol</xref>.
              </t>
            </list>
          </t>
        </section>
        
      </section>
      
      <section title="Interactive Authorization Using Authorization Endpoint" anchor="interactive-authz">
        <t>
          When end-user interaction is necessary in order to obtain an access
          token, the client requests authorization by redirecting the end-user
          to the authorization endpoint with an authorization request.  The
          authorization server then interacts with the end-user in order to
          obtain authorization.
        </t>
        
        <section title="Client Redirects Requesting Party to Authorization Endpoint">
          <t>
            The client redirects the end-user requesting party to the
            authorization server's authorization endpoint, as described in OAuth
            2.0 <xref target="RFC6749"/>.
          </t>
          
          <t>
            In addition to the parameters defined by OAuth 2.0 <xref target="RFC6749"/>,
            the following parameters are also defined:
          
            <list style="hanging"> 
              <t hangText="resource"> <vspace blankLines="1"/>
                Indicates the location of the target service or resource where
                the client intends to use the requested access token.  The value
                of this parameter MUST be an absolute URI.
              </t>
            </list> 
          </t>
          
          <t>
            The client MUST include the location of the resource it is 
            attempting to access as the value of the "resource" parameter in the
            authorization request.  If the resource server included a "scope"
            parameter in the "WWW-Authenticate" header field of its response,
            the client MUST add the value of that parameter to the "scope"
            parameter of the authorization request.
          </t>
          
          <figure>
            <preamble>
              For example (line breaks are for display purposes only):
            </preamble>
            <artwork><![CDATA[
GET /authorize?response_type=code&client_id=s6BhdRkqt3&state=xyz
    &redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb
    &resource=https%3A%2F%2Fserver.example.net%2Fresource
    &scope=read.resource HTTP/1.1
Host: server.example.com
]]></artwork>
          </figure>
        </section>
        
        <section title="Authorization Server Obtains Authorization">
          <t>
            The authorization server is used by a resource owner to apply access
            control policies.  The authorization server MUST ensure that the
            necessary conditions defined by said policies are met in order to
            issue an access token.  If necessary conditions are not met, the
            authorization server MUST NOT issue an access token.  The mechanisms
            by which policies are defined by the resource owner are outside the
            scope of this specification.
          </t>
          
          <t>
            Once the end-user requesting party has been redirected to the
            authorization endpoint, the authorization server can engage in
            interactive prompts with the end-user in order to collect the
            necessary information required to satisfy policy conditions.  Such
            prompts typically include, but are not limited to, a login prompt in
            order to authenticate the requesting party (or a registration prompt
            if the requesting party does not have an account) and a consent
            prompt in order to obtain the requesting party's authorization for
            the client to access protected resources.
          </t>
          
          <t>
            The end-user requesting party may or may not be the same as the
            resource owner.  Such cases occur, for example, in document sharing
            scenarios where an end-user is requesting access to a document that
            is owned by their colleage.  Furthermore, the colloration may be
            occuring between organizations, such as when employees from two
            different companies are participating in a joint project.  In such
            cases, the authorization server may have to perform multi-party
            authorization, where consent is collected from both the resource
            owner and the requesting party. 
          </t>
          
          <t>
            In scenarios in which the resource owner and requesting party are
            not the same, authorization by the resource owner is asynchronous
            with respect to any interactions with the requesting party.  The
            resource owner may have granted the requesting party access
            ahead-of-time, for example by inviting the requesting party by email
            address in a sharing dialog.  The resource owner may also grant
            access to the requesting party just-in-time, for example when the
            requesting party clicks a "request access" button after attempting
            to view a document that they are not allowed to access.  Any
            interactions between the resource owner and requesting party are at
            the discretion of the authorization server.
          </t>
          
          <t>
            After completing its interaction with the end-user requesting party,
            the authorization server redirects the requesting party back to the
            client's redirection endpoint.
          </t>
        </section>
        
        
        <section title="Authorization Server Issues Tokens to Client">
          <t>
            The authorization server issues an access token and, optionally, a
            refresh token to the client.  The mechansims by which the tokens
            are issued are specific to the "response_type" parameter in the
            authorization request and defined by OAuth 2.0 <xref target="RFC6749"/>.
          </t>
          
          <t>
            The access token is a credential used to access the protected
            resource.  The client presents this access when making a request to
            a protected resource as described in <xref target="authenticated-request"/>.
          </t>
          
          <t>
            The refresh token is a binding between the requesting party and the
            client, and represents the requesting party's authorization granted
            to the client to access protected resources on the requesting
            party's behalf.  The refresh token can be used to obtain new access
            tokens as described in <xref target="non-interactive-authz"/>.
          </t>
        </section>
        
      </section>
      
      <section title="Non-Interactive Authorization Using Token Endpoint" anchor="non-interactive-authz">
        <t>
          If the client has already obtained the requesting party's
          authorization to access protected resources, the client can attempt to
          obtain an access token directly without end-user interaction.  The
          client does so by making a token request to the token endpoint.  The
          client includes the refresh token, which is the authorization grant
          representing the requesting party's previously obtained authorization.
        </t>
        
        
        <section title="Client Requests Authorization using Refresh Token">
          <t>
            The client requests an access token for a protected resource by
            making a token request to the token endpoint as, as described in
            Section 6 of OAuth 2.0 <xref target="RFC6749"/>.
          </t>
          
          <t>
            In addition to the parameters defined by Section 6 of OAuth 2.0 <xref target="RFC6749"/>,
            the following parameters are also defined:
          
            <list style="hanging"> 
              <t hangText="resource"> <vspace blankLines="1"/>
                Indicates the location of the target service or resource where
                the client intends to use the requested access token.  The value
                of this parameter MUST be an absolute URI.
              </t>
            </list> 
          </t>
          
          <t>
            The client MUST include the location of the resource it is 
            attempting to access as the value of the "resource" parameter in the
            token request.  If the resource server included a "scope" parameter
            in the "WWW-Authenticate" header field of its response, the client
            MUST add the value of that parameter to the "scope" parameter of the
            token request.
          </t>
        
          <figure>
            <preamble>
              For example (line breaks are for display purposes only):
            </preamble>
            <artwork><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
Content-Type: application/x-www-form-urlencoded

grant_type=refresh_token&refresh_token=tGzv3JOkF0XG5Qx2TlKWIA
&resource=https%3A%2F%2Fserver.example.net%2Fresource
&scope=read.resource
]]></artwork>
          </figure>
        
        </section>
        
        <section title="Authorization Server Evaluates Access Control Policy">
          <t>
            The authorization server validates the refresh token and determines
            which requesting party and client it was bound to.  The authorization
            server then evaluates access control policies to determine what
            permissions the requesting party is authorized for at the target
            resource.  If the authorized permissions allow all requested scopes,
            and any additional conditions put in place by policy are met, the
            authorization server issues an access token as described in Section
            5.1 of OAuth 2.0 <xref target="RFC6749"/>.
          </t>
          
          <t>
            Section 6 of OAuth 2.0 <xref target="RFC6749"/> states the
            following about the "scope" parameter in the authorization request.
            <list>
              <t>
                The requested scope MUST NOT include any scope not originally
                granted by the resource owner, and if omitted is treated as
                equal to the scope originally granted by the resource owner.
              </t>
            </list>
          </t>
          
          <t>
            The "originally granted" restriction is not applicable in
            environments where access control policies can dynamically change an
            end-user's set of allowed permissions to various resources.  For
            example a resource owner may initially grant a requesting party
            access to view and edit document, and then subsequently revoke the
            requesting party's ability to edit that document.
          </t>
          
          <t>
            In order to accomodate such dynamic environments, this profile
            relaxes the specification to state:
            <list>
              <t>
                The requested scope MAY include any scope, and if omitted is
                treated as equal to the scope originally granted by the resource
                owner.
              </t>
            </list>
          </t>
          
          <t>
            The following enhanced restriction is put in place in order to
            ensure that access control policy is enforced:
            <list>
              <t>
                The authorization server MUST NOT include any scope in the
                access token which a requesting party and/or client is not
                allowed to possess according to access control policies.
              </t>
            </list>
          </t>
        </section>
        
        <section title="Authorization Server Response on Authorization Failure">
          <t>
            If the client's request to the token endpoint results in failure,
            the authorization server returns an error response as described in
            Section 5.2 of OAuth 2.0 <xref target="RFC6749"/>.
          </t>
          
          <t>
            In addition to the error codes defined in Section 5.2 of OAuth 2.0 <xref target="RFC6749"/>,
            the following error codes are defined by this profile:
          
            <list style="hanging"> 
              <t hangText="interaction_required"> <vspace blankLines="1"/>
                The authorization server requires end-user interaction of some
                form to proceed.  The client MAY attempt to obtain an access
                token by redirecting the end-user requesting party to the
                authorization endpoint as described in <xref target="interactive-authz"/>.
              </t>
            </list> 
          </t>
        </section>
        
      </section>
      
      <section title="Requesting a Resource With Authentication Credentials" anchor="authenticated-request">
        
        <section title="Client Requests a Resource With Authentication Credentials">
          <t>
            The client requests a protected resource and presents the access
            token issued by the authorization server.
          </t>
        
          <figure>
            <preamble>
              For example (line breaks are for display purposes only):
            </preamble>
            <artwork><![CDATA[
GET /resource HTTP/1.1
Host: server.example.net
Authorization: Bearer mF_9.B5f-4.1JqM
]]></artwork>
          </figure>
        </section>
        
        <section title="Resource Server Responds to Client's Authenticated Request">
          <t>
            The resource server responds to the client's authenticated resource
            request.
          </t>
          
          <t>
            If a resource access request fails due to an invalid or expired
            access token, the resource server responds as described in <xref target="auth-challenge"/>.
          </t>
        </section>
        
      </section>
      
    </section>
    
  </middle>
  <back>
    <references title="Normative References">
      <?rfc include="reference.RFC.2119"?>
      <?rfc include="reference.RFC.6749"?>
      <?rfc include="reference.RFC.6750"?>
      <?rfc include="reference.RFC.7235"?>
      <?rfc include="reference.RFC.7591"?>
      <?rfc include='http://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.draft-ietf-oauth-discovery-10.xml'?>
    
      <reference anchor="OpenID.Discovery" target="http://openid.net/specs/openid-connect-discovery-1_0.html">
        <front>
          <title>OpenID Connect Discovery 1.0</title>
          <author fullname="Nat Sakimura" initials="N." surname="Sakimura">
            <organization abbrev="NRI">Nomura Research Institute,
            Ltd.</organization>
          </author>

          <author fullname="John Bradley" initials="J." surname="Bradley">
            <organization abbrev="Ping Identity">Ping Identity</organization>
          </author>

          <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
            <organization abbrev="Microsoft">Microsoft</organization>
          </author>

          <author fullname="Edmund Jay" initials="E." surname="Jay">
            <organization>Illumila</organization>
          </author>

          <date day="8" month="November" year="2014"/>
        </front>
      </reference>
    </references>
    
    <section title="Comparison With User Managed Access 2.0" anchor="uma2-compare">
      <t>
        This specification is intended to address a similar set of use cases
        supported by User Managed Access (UMA) 2.0.  In contrast with UMA 2.0,
        which introduces additional endpoints, grant types, and tokens, RAD
        reuses the already existing capabilities of OAuth 2.0 alone.
      </t>
      
      <t>
        It is expected that by reusing existing OAuth 2.0 functionality, it will
        be easier for developers of resource servers and clients to implement
        RAD, relative to the effort required to implement UMA 2.0.  It is
        believed, by the author, that while UMA introduced important
        capabilities, the adoption has suffed due to the complexity of the
        protocol.
      </t>
      
      <section title="Claims Interaction Endpoint">
        <t>
          UMA 2.0 defines a claims interaction endpoint to interact with
          end-users to gather claims.
        </t>
        <t>
          RAD eliminates the claims interaction endpoint by reusing the
          authorization endpoint.  The authorization endpoint in a typical
          authorization server already interacts with end-users in order to
          handle login and consent (both of which can be considered claims
          in and of themselves).  Any interaction necessary to gather additional
          claims can be handled in a similar manner.
        </t>
        <t>
          Due to the elimination of the claims interaction endpoint, the need
          for a client to provide a corresponding claims redirection endpoint is
          also eliminated.
        </t>
      </section>
      
      <section title="Permission Endpoint, Permission Ticket, and UMA Authentication Scheme">
        <t>
          UMA 2.0 defines a permission endpoint which a resource server uses
          to request permissions with the authorization server on the client's
          behalf.  Once the permission has been requested, it is represented as
          a permission ticket which is transmitted to the client via the UMA
          authentication scheme in an HTTP response.  The client then transmits
          the ticket back to the authorization server when requesting
          authorization.
        </t>
        <t>
          RAD eliminates the the need for the permission endpoint, permission
          ticket and UMA authorization scheme by reusing the existing HTTP
          authentication framework.  When an unauthorized request is received,
          the protected resource indicates the scope of access required, as well
          as the authorization server that issues access tokens, in the
          parameters of the existing authentication scheme it supports (typically
          "Bearer").  The client then makes a standard OAuth authorization request
          including the scope of access it is requesting.  Once the access token
          has been issued, the client presents it to the protected resource using
          the supported authentication scheme.
        </t>
      </section>
      
      <section title="Persisted Claims Token">
        <t>
          The persisted claims token (PCT) in UMA 2.0 is a correlation handle
          that represents a set of claims collected during one authorization
          process that can be used to optimize a future authorization process.
        </t>
        <t>
          RAD eliminates the need for a PCT by reusing the refresh token, which
          represents the grant authorized by the requesting party.  Any
          additional claims collected from the requesting party during the
          authorization process can be correlated with the refresh token.
        </t>
      </section>
    </section>
  </back>
</rfc>
