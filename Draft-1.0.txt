



Network Working Group                                          J. Hanson
Internet-Draft                                                Auth0 Inc.
Expires: December 12, 2018                                 June 10, 2018


               OAuth 2.0 Resource Authorization Directive
                     draft-hanson-oauth-rad-latest

Abstract

   Resource Authorization Directive (RAD) is a profile of OAuth 2.0.
   RAD defines how clients can discover which authorization server
   governs access to a protected resource.  RAD also profiles existing
   OAuth 2.0 authorization grants to define how the client can obtain
   access to any number of protected resources with the minimum amount
   of user interaction.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on December 12, 2018.

Copyright Notice

   Copyright (c) 2018 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.



Hanson                  Expires December 12, 2018               [Page 1]

Internet-Draft OAuth 2.0 Resource Authorization Directive      June 2018


1.  Introduction

1.1.  Notational Conventions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   [RFC2119].

1.2.  Roles

   RAD enhances the roles defined by OAuth in RFC 6749, section 1.1, in
   the following manner:

   resource owner:

      An entity capable of granting access to a protected resource.
      When the resource owner is a person, it is referred to as an end-
      user.

   requesting party:

      An entity that uses a client to seek access to a protected
      resource.  The requesting party may or may not be the same party
      as the resource owner.

   resource server:

      The server hosting the protected resources, capable of accepting
      and responding to protected resource requests using access tokens.

   client:

      An application making protected resource requests on behalf of the
      requesting party and with the resource owner's authorization.

   authorization server:

      The server issuing access tokens to the client after successfully
      authenticating the requesting party and obtaining the resource
      owner's authorization.

1.3.  WIP

   Continuous authorization...






Hanson                  Expires December 12, 2018               [Page 2]

Internet-Draft OAuth 2.0 Resource Authorization Directive      June 2018


   OAuth defines the refresh token in section 1.5 as: A refresh token is
   a string representing the authorization granted to the client by the
   resource owner.

   This profile extends the meaning of this to include a requesting
   party.

   The value of the scope parameter is expressed as a list of space-
   delimited, case-sensitive strings.  The strings are defined by the
   authorization server.  Section 3.3.  This specificatin clarifies this
   to state that the scope is defined by the resource server

   the authorization server authenticates the resource owner and obtains
   an authorization decision (by asking the resource owner or by
   establishing approval via other means) section 4.1.1

   The scope of the access request as described by Section 3.3.  The
   requested scope MUST NOT include any scope not originally granted by
   the resource owner, and if omitted is treated as equal to the scope
   originally granted by the resource owner.  Section 6.  This
   specification clarifies "originally granted", chiefly to remove the
   constraint.  This is in acknowledgement that the resource owner's
   grant can change dynamically at any time, either to decrease _or_
   increase the scope of access.

   The refresh token is bound to the client and requesting party.

   Mechanism for resource server ot indicated trusted authorization
   servers: `iss` https://tools.ietf.org/html/draft-hardt-oauth-
   distributed-00 auri and duri rel values: https://tools.ietf.org/html/
   draft-sakimura-oauth-meta-08

2.  Obtaining Authorization and Accessing Protected Resources

2.1.  Requesting a Resource Without Authentication Credentials

   The RAD profile begins when a client attempts to access a protected
   resource for the first time.  On the initial access attempt, the
   client's knowledge of the resource and its capabilities is limited,
   potentially only to the location of the resource itself.  In
   particular the client is not expected to know what scope of access is
   required, if any, or what authorization server governs access to the
   resource.








Hanson                  Expires December 12, 2018               [Page 3]

Internet-Draft OAuth 2.0 Resource Authorization Directive      June 2018


2.1.1.  Client Requests a Resource Without Authentication Credentials

   The client requests a protected resource without providing
   authentication credentials.

   For example (line breaks are for display purposes only):

   GET /resource HTTP/1.1
   Host: server.example.net

2.1.2.  Resource Server Responds to Client's Unauthenticated Request

   The resource server responds to the client's unauthenticated request
   by including a WWW-Authenticate header field, as described in
   Section 4.1 of [RFC7235].

   This specification defines the "issuer" authentication parameter for
   use by authentication schemes that wish to indicate which
   authorization server issues access tokens that can be used as
   authentication credentials when requesting a protected resource.

   The value of the "issuer" authentication parameter is a URL that is
   the authorization server's issuer identifier.  This identifier MUST
   be usable in such a manner that the client can discover information
   needed to interact with the authorization server, including endpoint
   locations needed to obtain access tokens.

   When responding to the client's unauthenticated request, the resource
   server MUST include the "issuer" parameter and MAY include a "scope"
   parameter, as described in Section 3 of [RFC6750].

   For example (line breaks are for display purposes only):

   HTTP/1.1 401 Unauthorized
   WWW-Authenticate: Bearer issuer="https://server.example.com",
                     scope="read.resource"

2.2.  Client Seeks Access Token

   Client seeks access token by making authorization request to
   authorization server.  This can occur using any grant type supported
   by the AS

   Has two options, one to request an access token from the token
   endpoint immediately.  The other option is to initiate an
   authorization request to the authorization endpoint.





Hanson                  Expires December 12, 2018               [Page 4]

Internet-Draft OAuth 2.0 Resource Authorization Directive      June 2018


2.2.1.  Client Seeks Access Token using Refresh Token

   Client is already authorized by the requesting party at the AS.

   For example:

   POST /token HTTP/1.1
   Host: server.example.com
   Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
   Content-Type: application/x-www-form-urlencoded

   grant_type=refresh_token&refresh_token=tGzv3JOkF0XG5Qx2TlKWIA
   &resource=https://server.example.net/resource

   Responds with errors as defined in Section 5.2 of RFC 6749.  In
   addtion, the following error codes are defined.

   interaction_required

      The authorizatino server requires end-user interaction to proceed.
      The client should make an authorization request to the
      authorization endpoint.

2.2.2.  Client Redirects to Authorization Endpoint

   Authorization server can interact with requesting party for purposes
   such as authentication, claims gathering, etc.

   For example:

   GET /authorize?response_type=code&client_id=s6BhdRkqt3&state=xyz
       &resource=https://server.example.net/resource
       &redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb HTTP/1.1
   Host: server.example.com

   Authorization server redirects back.

   For example:

   HTTP/1.1 302 Found
   Location: https://client.example.com/cb?code=SplxlOBeZQQYbYS6WxSbIA
             &state=xyz

   The authorization server _may_ issue a refresh token.  This token
   represents (???), and may be used to optimize obtainning tokens for
   other resources in subsequent authorization processes.





Hanson                  Expires December 12, 2018               [Page 5]

Internet-Draft OAuth 2.0 Resource Authorization Directive      June 2018


3.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997, <https://www.rfc-
              editor.org/info/rfc2119>.

   [RFC4627]  Crockford, D., "The application/json Media Type for
              JavaScript Object Notation (JSON)", RFC 4627,
              DOI 10.17487/RFC4627, July 2006, <https://www.rfc-
              editor.org/info/rfc4627>.

   [RFC6749]  Hardt, D., Ed., "The OAuth 2.0 Authorization Framework",
              RFC 6749, DOI 10.17487/RFC6749, October 2012,
              <https://www.rfc-editor.org/info/rfc6749>.

   [RFC6750]  Jones, M. and D. Hardt, "The OAuth 2.0 Authorization
              Framework: Bearer Token Usage", RFC 6750,
              DOI 10.17487/RFC6750, October 2012, <https://www.rfc-
              editor.org/info/rfc6750>.

   [RFC7235]  Fielding, R., Ed. and J. Reschke, Ed., "Hypertext Transfer
              Protocol (HTTP/1.1): Authentication", RFC 7235,
              DOI 10.17487/RFC7235, June 2014, <https://www.rfc-
              editor.org/info/rfc7235>.

   [I-D.ietf-oauth-discovery]
              Jones, M., Sakimura, N., and J. Bradley, "OAuth 2.0
              Authorization Server Metadata", draft-ietf-oauth-
              discovery-05 (work in progress), January 2017.

Author's Address

   Jared Hanson
   Auth0 Inc.

   Email: jaredhanson@gmail.com
   URI:   http://www.jaredhanson.net/













Hanson                  Expires December 12, 2018               [Page 6]
