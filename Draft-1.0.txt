



Network Working Group                                          J. Hanson
Internet-Draft                                                Auth0 Inc.
Expires: December 4, 2018                                   June 2, 2018


                  OAuth 2.0 Just-in-Time Authorization
                   draft-hanson-oauth-jit-auth-latest

Abstract

   Just-in-Time (JIT) authorization is a profile of OAuth 2.0.  JIT
   defines how clients can discover which authorization server governs
   access to a protected resource.  JIT also profiles existing OAuth 2.0
   authorization grants to define how the client can obtain access to
   any number of protected resources with the minimum amount of user
   interaction.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on December 4, 2018.

Copyright Notice

   Copyright (c) 2018 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.



Hanson                  Expires December 4, 2018                [Page 1]

Internet-Draft    OAuth 2.0 Just-in-Time Authorization         June 2018


1.  Introduction

1.1.  Notational Conventions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   [RFC2119].

1.2.  Roles

   JIT enhances the roles defined by OAuth in RFC 6749, section 1.1, in
   the following manner:

   resource owner:

      An entity capable of granting access to a protected resource.
      When the resource owner is a person, it is referred to as an end-
      user.

   requesting party:

      An entity that uses a client to seek access to a protected
      resource.  The requesting party may or may not be the same party
      as the resource owner.

   resource server:

      The server hosting the protected resources, capable of accepting
      and responding to protected resource requests using access tokens.

   client:

      An application making protected resource requests on behalf of the
      requesting party and with the resource owner's authorization.

   authorization server:

      The server issuing access tokens to the client after successfully
      authenticating the requesting party and obtaining the resource
      owner's authorization.

1.3.  WIP

   Continuous authorization...






Hanson                  Expires December 4, 2018                [Page 2]

Internet-Draft    OAuth 2.0 Just-in-Time Authorization         June 2018


   OAuth defines the refresh token in section 1.5 as: A refresh token is
   a string representing the authorization granted to the client by the
   resource owner.

   This profile extends the meaning of this to include a requesting
   party.

   The value of the scope parameter is expressed as a list of space-
   delimited, case-sensitive strings.  The strings are defined by the
   authorization server.  Section 3.3.  This specificatin clarifies this
   to state that the scope is defined by the resource server

   the authorization server authenticates the resource owner and obtains
   an authorization decision (by asking the resource owner or by
   establishing approval via other means) section 4.1.1

   The scope of the access request as described by Section 3.3.  The
   requested scope MUST NOT include any scope not originally granted by
   the resource owner, and if omitted is treated as equal to the scope
   originally granted by the resource owner.  Section 6.  This
   specification clarifies "originally granted", chiefly to remove the
   constraint.  This is in acknowledgement that the resource owner's
   grant can change dynamically at any time, either to decrease _or_
   increase the scope of access.

   The refresh token is bound to the client and requesting party.

   Mechanism for resource server ot indicated trusted authorization
   servers: `iss` https://tools.ietf.org/html/draft-hardt-oauth-
   distributed-00 auri and duri rel values: https://tools.ietf.org/html/
   draft-sakimura-oauth-meta-08

2.  Protocol Flow

2.1.  Client Requests Resource Without Providing an Access Token

   The client requests a protected resource without providing any access
   token.

   For example:

   GET /resource HTTP/1.1
   Host: server.example.net








Hanson                  Expires December 4, 2018                [Page 3]

Internet-Draft    OAuth 2.0 Just-in-Time Authorization         June 2018


2.2.  Resource Server Responds to Client's Tokenless Access Attempt

   The resource server responds to the client's tokenless resource
   request.

   For example:

   HTTP/1.1 401 Unauthorized
   WWW-Authenticate: Bearer issuer="https://server.example.com"

3.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997, <https://www.rfc-
              editor.org/info/rfc2119>.

   [RFC4627]  Crockford, D., "The application/json Media Type for
              JavaScript Object Notation (JSON)", RFC 4627,
              DOI 10.17487/RFC4627, July 2006, <https://www.rfc-
              editor.org/info/rfc4627>.

   [RFC6749]  Hardt, D., Ed., "The OAuth 2.0 Authorization Framework",
              RFC 6749, DOI 10.17487/RFC6749, October 2012,
              <https://www.rfc-editor.org/info/rfc6749>.

   [I-D.ietf-oauth-discovery]
              Jones, M., Sakimura, N., and J. Bradley, "OAuth 2.0
              Authorization Server Metadata", draft-ietf-oauth-
              discovery-05 (work in progress), January 2017.

Author's Address

   Jared Hanson
   Auth0 Inc.

   Email: jaredhanson@gmail.com
   URI:   http://www.jaredhanson.net/













Hanson                  Expires December 4, 2018                [Page 4]
