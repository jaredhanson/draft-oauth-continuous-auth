



Network Working Group                                          J. Hanson
Internet-Draft                                                Auth0 Inc.
Expires: December 12, 2018                                 June 10, 2018


               OAuth 2.0 Resource Authorization Directive
                     draft-hanson-oauth-rad-latest

Abstract

   Resource Authorization Directive (RAD) is a profile of OAuth 2.0.
   RAD defines how clients can discover which authorization server
   governs access to a protected resource.  RAD also profiles existing
   OAuth 2.0 authorization grants to define how the client can obtain
   access on behalf of a requesting party to any number of protected
   resources residing within multiple security domains with the minimum
   amount of user interaction.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on December 12, 2018.

Copyright Notice

   Copyright (c) 2018 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of




Hanson                  Expires December 12, 2018               [Page 1]

Internet-Draft OAuth 2.0 Resource Authorization Directive      June 2018


   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

1.  Introduction

   This specification defines a profile of OAuth 2.0, enhancing its
   capabilities in the following ways.

   o  The resource owner authorizes protected resource access to clients
      used by entities that are in a requesting party role.  This
      enables multi-party authorization, rather than delegated
      application access alone.

   o  It enables resource servers operating in multiple security domains
      to federate authorization processing with an authorization server
      residing in yet another security domain.

   For example, the company Acme Corporation can use an access
   management service (authorization server) to control access to
   various software as a service (SaaS) providers, including a team
   collaboration application (resource server), cloud file system
   (another resource server), and a customer relationship management
   service (yet another resource server).  Team manager Alice (resource
   owner) can manage the access that employees Bob and Carol (requesting
   parties) have to the various files, folders, and other information
   hosted by the SaaS providers.

1.1.  Notational Conventions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   [RFC2119].

1.2.  Roles

   RAD enhances the roles defined by Section 1.1 of OAuth 2.0 [RFC6749],
   in the following manner:

   resource owner:

      An entity capable of granting access to a protected resource.
      When the resource owner is a person, it is referred to as an end-
      user.

   requesting party:





Hanson                  Expires December 12, 2018               [Page 2]

Internet-Draft OAuth 2.0 Resource Authorization Directive      June 2018


      An entity that uses a client to seek access to a protected
      resource.  The requesting party may or may not be the same party
      as the resource owner.

   resource server:

      The server hosting the protected resources, capable of accepting
      and responding to protected resource requests using access tokens.

   client:

      An application making protected resource requests on behalf of the
      requesting party and with the resource owner's authorization.

   authorization server:

      The server issuing access tokens to the client after successfully
      authenticating the requesting party and obtaining the resource
      owner's authorization.

2.  Obtaining Authorization and Accessing Protected Resources

2.1.  Requesting a Resource Without Authentication Credentials

   The RAD profile begins when a client attempts to access a protected
   resource.  On the initial access attempt, the client's knowledge of
   the resource and its capabilities is limited, potentially only to the
   location of the resource itself.  In particular the client is not
   expected to know what scope of access is required, if any, or what
   authorization server governs access to the resource.

2.1.1.  Client Requests a Resource Without Authentication Credentials

   The client requests a protected resource without providing
   authentication credentials.

   For example (line breaks are for display purposes only):

   GET /resource HTTP/1.1
   Host: server.example.net

2.1.2.  Resource Server Responds to Client's Unauthenticated Request

   The resource server responds to the client's unauthenticated request
   by including a WWW-Authenticate header field, as described in
   Section 4.1 of [RFC7235].





Hanson                  Expires December 12, 2018               [Page 3]

Internet-Draft OAuth 2.0 Resource Authorization Directive      June 2018


   This specification defines the "issuer" authentication parameter for
   use by authentication schemes that wish to indicate which
   authorization server issues access tokens that can be used as
   authentication credentials when requesting a protected resource.

   The value of the "issuer" authentication parameter is a URL that is
   the authorization server's issuer identifier.  This identifier MUST
   be usable in such a manner that the client can discover information
   needed to interact with the authorization server, including endpoint
   locations needed to obtain access tokens.

   When responding to the client's unauthenticated request, the resource
   server MUST include the "issuer" parameter and MAY include a "scope"
   parameter, as described in Section 3 of [RFC6750].

   For example (line breaks are for display purposes only):

   HTTP/1.1 401 Unauthorized
   WWW-Authenticate: Bearer issuer="https://server.example.com",
                     scope="read.resource"

2.1.3.  Client Proceeds to Respond to Authentication Challenge

   In order to proceed with accessing the protected resource, the client
   must respond to the authentication challenge by obtaining an access
   token.

   There are two options for obtaining an access token.

   o  Interactive - used by the client to allow the authorization server
      to interact with the end-user.  This option is described in
      Section 2.2.

   o  Non-interactive - used by the client to obtain an access token
      directly without end-user interaction.  This option is described
      in Section 2.3.

   The process for obtaining an access token assumes that:

   o  The client has discovered the necessary metadata in order to
      interact with the authorization server.  This information may have
      been statically configured or retrieved dynamically using OAuth
      2.0 Authorization Server Metadata [I-D.ietf-oauth-discovery] or
      OpenID Connect Discovery 1.0 [OpenID.Discovery].

   o  The client has obtained a client identifer and client credentials
      valid at the authorization server.  These credentials may have




Hanson                  Expires December 12, 2018               [Page 4]

Internet-Draft OAuth 2.0 Resource Authorization Directive      June 2018


      been statically configured or created dynamically using OAuth 2.0
      Dynamic Client Registration Protocol [RFC7591].

2.2.  Interactive Authorization Using Authorization Endpoint

   When end-user interaction is necessary in order to obtain an access
   token, the client requests authorization by redirecting the end-user
   to the authorization endpoint with an authorization request.  The
   authorization server then interacts with the end-user in order to
   obtain authorization.

2.2.1.  Client Redirects Requesting Party to Authorization Endpoint

   The client redirects the end-user requesting party to the
   authorization server's authorization endpoint, as described in OAuth
   2.0 [RFC6749].

   In addition to the parameters defined by OAuth 2.0 [RFC6749], the
   following parameters are also defined:

   resource

      Indicates the location of the target service or resource where the
      client intends to use the requested access token.  The value of
      this parameter MUST be an absolute URI.

   The client MUST include the location of the resource it is attempting
   to access as the value of the "resource" parameter in the
   authorization request.  If the resource server included a "scope"
   parameter in the "WWW-Authenticate" header field of its response, the
   client MUST add the value of that parameter to the "scope" parameter
   of the authorization request.

   For example (line breaks are for display purposes only):

   GET /authorize?response_type=code&client_id=s6BhdRkqt3&state=xyz
       &redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb
       &resource=https%3A%2F%2Fserver.example.net%2Fresource
       &scope=read.resource HTTP/1.1
   Host: server.example.com

2.2.2.  Authorization Server Obtains Authorization

   The authorization server is used by a resource owner to apply access
   control policies.  The authorization server MUST ensure that the
   necessary conditions defined by said policies are met in order to
   issue an access token.  If necessary conditions are not met, the
   authorization server MUST NOT issue an access token.  The mechanisms



Hanson                  Expires December 12, 2018               [Page 5]

Internet-Draft OAuth 2.0 Resource Authorization Directive      June 2018


   by which policies are defined by the resource owner are outside the
   scope of this specification.

   Once the end-user requesting party has been redirected to the
   authorization endpoint, the authorization server can engage in
   interactive prompts with the end-user in order to collect the
   necessary information required to satisfy policy conditions.  Such
   prompts typically include, but are not limited to, a login prompt in
   order to authenticate the requesting party (or a registration prompt
   if the requesting party does not have an account) and a consent
   prompt in order to obtain the requesting party's authorization for
   the client to access protected resources.

   The end-user requesting party may or may not be the same as the
   resource owner.  Such cases occur, for example, in document sharing
   scenarios where an end-user is requesting access to a document that
   is owned by their colleage.  Furthermore, the colloration may be
   occuring between organizations, such as when employees from two
   different companies are participating in a joint project.  In such
   cases, the authorization server may have to perform multi-party
   authorization, where consent is collected from both the resource
   owner and the requesting party.

   In scenarios in which the resource owner and requesting party are not
   the same, authorization by the resource owner is asynchronous with
   respect to any interactions with the requesting party.  The resource
   owner may have granted the requesting party access ahead-of-time, for
   example by inviting the requesting party by email address in a
   sharing dialog.  The resource owner may also grant access to the
   requesting party just-in-time, for example when the requesting party
   clicks a "request access" button after attempting to view a document
   that they are not allowed to access.  Any interactions between the
   resource owner and requesting party are at the discretion of the
   authorization server.

   After completing its interaction with the end-user requesting party,
   the authorization server redirects the requesting party back to the
   client's redirection endpoint.

2.2.3.  Authorization Server Issues Tokens to Client

   The authorization server issues an access token and, optionally, a
   refresh token to the client.  The mechansims by which the tokens are
   issued are specific to the "response_type" parameter in the
   authorization request and defined by OAuth 2.0 [RFC6749].






Hanson                  Expires December 12, 2018               [Page 6]

Internet-Draft OAuth 2.0 Resource Authorization Directive      June 2018


   The access token is a credential used to access the protected
   resource.  The client presents this access when making a request to a
   protected resource as described in Section 2.4.

   The refresh token is a binding between the requesting party and the
   client, and represents the requesting party's authorization granted
   to the client to access protected resources on the requesting party's
   behalf.  The refresh token can be used to obtain new access tokens as
   described in Section 2.3.

2.3.  Non-Interactive Authorization Using Token Endpoint

   If the client has already obtained the requesting party's
   authorization to access protected resource, the client can attempt to
   obtain an access token directly without end-user interaction.  The
   client does so by making a token request to the token endpoint.  The
   client includes the refresh token, which is the authorization grant
   representing the requesting party's previously obtained
   authorization.

2.3.1.  Client Requests Authorization using Refresh Token

   The client requests an access token for a protected resource by
   making a token request to the token endpoint as, as described in
   Section 6 of OAuth 2.0 [RFC6749].

   In addition to the parameters defined by Section 6 of OAuth 2.0
   [RFC6749], the following parameters are also defined:

   resource

      Indicates the location of the target service or resource where the
      client intends to use the requested access token.  The value of
      this parameter MUST be an absolute URI.

   The client MUST include the location of the resource it is attempting
   to access as the value of the "resource" parameter in the token
   request.  If the resource server included a "scope" parameter in the
   "WWW-Authenticate" header field of its response, the client MUST add
   the value of that parameter to the "scope" parameter of the token
   request.










Hanson                  Expires December 12, 2018               [Page 7]

Internet-Draft OAuth 2.0 Resource Authorization Directive      June 2018


   For example (line breaks are for display purposes only):

   POST /token HTTP/1.1
   Host: server.example.com
   Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
   Content-Type: application/x-www-form-urlencoded

   grant_type=refresh_token&refresh_token=tGzv3JOkF0XG5Qx2TlKWIA
   &resource=https%3A%2F%2Fserver.example.net%2Fresource
   &scope=read.resource

2.3.2.  Authorization Server Evaluates Access Control Policy

   The client validates the refresh token and determines which
   requesting party and client it was bound to.  The authorization
   server then evaluates access control policies to determine what
   permissions the requesting party is authorized for at the target
   resource.  If the authorized permissions allow all requested scopes,
   and any additional conditions put in place by policy are met, the
   authorization server issues an access token as described in
   Section 5.1 of OAuth 2.0 [RFC6749].

   Section 6 of OAuth 2.0 [RFC6749] states the following about the
   "scope" parameter in the authorization request.

      The requested scope MUST NOT include any scope not originally
      granted by the resource owner, and if omitted is treated as equal
      to the scope originally granted by the resource owner.

   The "originally granted" restriction is not applicable in
   environments where access control policies can dynamically change an
   end-user's set of allowed permissions to various resources.  For
   example a resource owner may initially grant a requesting party
   access to view a document, and then subsequently grant the requesting
   party access to edit the same document.

   In order to accomodate such dynamic environments, this profile
   relaxes the specification to state:

      The requested scope MAY include any scope, and if omitted is
      treated as equal to the scope originally granted by the resource
      owner.

   The following enhanced restriction is put in place in order to ensure
   that access control policy is enforced:






Hanson                  Expires December 12, 2018               [Page 8]

Internet-Draft OAuth 2.0 Resource Authorization Directive      June 2018


      The authorization server MUST NOT include any scope in the access
      token which a requesting party and/or client is not allowed to
      possess according to access control policies.

2.3.3.  Authorization Server Response on Authorization Failure

   If the client's request to the token endpoint results in failure, the
   authorization server returns an error response as described in
   Section 5.2 of OAuth 2.0 [RFC6749].

   In addition to the error codes defined in Section 5.2 of OAuth 2.0
   [RFC6749], the following error codes are defined by this profile:

   interaction_required

      The authorization server requires end-user interaction of some
      form to proceed.  The client MAY attempt to obtain an access token
      by redirecting the end-user requesting party to the authorization
      endpoint as described in Section 2.2.

2.4.  Requesting a Resource With Authentication Credentials

2.4.1.  Client Requests a Resource With Authentication Credentials

   The client requests a protected resource and presents the access
   token issued by the authorization server.

   For example (line breaks are for display purposes only):

   GET /resource HTTP/1.1
   Host: server.example.net
   Authorization: Bearer mF_9.B5f-4.1JqM

2.4.2.  Resource Server Responds to Client's Authenticated Request

   The resource server responds to the client's authenticated resource
   request.

   If a resource access request fails due to an invalid or expired
   access token, the resource server responds as described in
   Section 2.1.2.

3.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997, <https://www.rfc-
              editor.org/info/rfc2119>.



Hanson                  Expires December 12, 2018               [Page 9]

Internet-Draft OAuth 2.0 Resource Authorization Directive      June 2018


   [RFC6749]  Hardt, D., Ed., "The OAuth 2.0 Authorization Framework",
              RFC 6749, DOI 10.17487/RFC6749, October 2012,
              <https://www.rfc-editor.org/info/rfc6749>.

   [RFC6750]  Jones, M. and D. Hardt, "The OAuth 2.0 Authorization
              Framework: Bearer Token Usage", RFC 6750,
              DOI 10.17487/RFC6750, October 2012, <https://www.rfc-
              editor.org/info/rfc6750>.

   [RFC7235]  Fielding, R., Ed. and J. Reschke, Ed., "Hypertext Transfer
              Protocol (HTTP/1.1): Authentication", RFC 7235,
              DOI 10.17487/RFC7235, June 2014, <https://www.rfc-
              editor.org/info/rfc7235>.

   [RFC7591]  Richer, J., Ed., Jones, M., Bradley, J., Machulak, M., and
              P. Hunt, "OAuth 2.0 Dynamic Client Registration Protocol",
              RFC 7591, DOI 10.17487/RFC7591, July 2015,
              <https://www.rfc-editor.org/info/rfc7591>.

   [I-D.ietf-oauth-discovery]
              Jones, M., Sakimura, N., and J. Bradley, "OAuth 2.0
              Authorization Server Metadata", draft-ietf-oauth-
              discovery-10 (work in progress), March 2018.

   [OpenID.Discovery]
              Sakimura, N., Bradley, J., Jones, M., and E. Jay, "OpenID
              Connect Discovery 1.0", November 2014,
              <http://openid.net/specs/
              openid-connect-discovery-1_0.html>.

Appendix A.  Comparison With User Managed Access 2.0

Author's Address

   Jared Hanson
   Auth0 Inc.

   Email: jaredhanson@gmail.com
   URI:   http://www.jaredhanson.net/












Hanson                  Expires December 12, 2018              [Page 10]
